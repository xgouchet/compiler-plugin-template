FILE fqName:<root> fileName:/logMethod.kt
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:result type:kotlin.String? [val]
        CALL 'public final fun logMePlease (i: kotlin.Int, s: kotlin.String): kotlin.String? declared in <root>' type=kotlin.String? origin=null
          ARG i: CONST Int type=kotlin.Int value=42
          ARG s: CONST String type=kotlin.String value="Lorem ipsum dolor sit amet…"
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
  FUN name:logMePlease visibility:public modality:FINAL returnType:kotlin.String?
    VALUE_PARAMETER kind:Regular name:i index:0 type:kotlin.Int
    VALUE_PARAMETER kind:Regular name:s index:1 type:kotlin.String
    annotations:
      LogMethod
    BLOCK_BODY
      CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit declared in kotlin.io' type=kotlin.Unit origin=null
        ARG message: STRING_CONCATENATION type=kotlin.String
          CONST String type=kotlin.String value="⇢ logMePlease("
          CONST String type=kotlin.String value="i="
          GET_VAR 'i: kotlin.Int declared in <root>.logMePlease' type=kotlin.Int origin=null
          CONST String type=kotlin.String value=", "
          CONST String type=kotlin.String value="s="
          GET_VAR 's: kotlin.String declared in <root>.logMePlease' type=kotlin.String origin=null
          CONST String type=kotlin.String value=")"
      BLOCK type=kotlin.Nothing origin=null
        VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.String? [val]
          WHEN type=kotlin.String? origin=IF
            BRANCH
              if: WHEN type=kotlin.Boolean origin=ANDAND
                BRANCH
                  if: CALL 'public final fun greaterOrEqual (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
                    ARG arg0: GET_VAR 'i: kotlin.Int declared in <root>.logMePlease' type=kotlin.Int origin=null
                    ARG arg1: CONST Int type=kotlin.Int value=0
                  then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                    ARG arg0: GET_VAR 'i: kotlin.Int declared in <root>.logMePlease' type=kotlin.Int origin=null
                    ARG arg1: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: GET_VAR 's: kotlin.String declared in <root>.logMePlease' type=kotlin.String origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Boolean type=kotlin.Boolean value=false
              then: BLOCK type=kotlin.String origin=null
                CALL 'public final fun plus (other: kotlin.Any?): kotlin.String declared in kotlin.String' type=kotlin.String origin=PLUS
                  ARG <this>: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String declared in kotlin.String' type=kotlin.String origin=PLUS
                    ARG <this>: CONST String type=kotlin.String value="["
                    ARG other: CALL 'public open fun get (index: kotlin.Int): kotlin.Char declared in kotlin.String' type=kotlin.Char origin=null
                      ARG <this>: GET_VAR 's: kotlin.String declared in <root>.logMePlease' type=kotlin.String origin=null
                      ARG index: GET_VAR 'i: kotlin.Int declared in <root>.logMePlease' type=kotlin.Int origin=null
                  ARG other: CONST String type=kotlin.String value="]"
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: BLOCK type=kotlin.Nothing? origin=null
                CONST Null type=kotlin.Nothing? value=null
        CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit declared in kotlin.io' type=kotlin.Unit origin=null
          ARG message: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value="⇠ logMePlease"
            CONST String type=kotlin.String value=" = "
            GET_VAR 'val tmp_0: kotlin.String? declared in <root>.logMePlease' type=kotlin.String? origin=null
        RETURN type=kotlin.Nothing from='public final fun logMePlease (i: kotlin.Int, s: kotlin.String): kotlin.String? declared in <root>'
          GET_VAR 'val tmp_0: kotlin.String? declared in <root>.logMePlease' type=kotlin.String? origin=null
